/* 
 * DDStore API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDdInfosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>bool?</returns>
        bool? CheckIfDriverIsSupported (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null);

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CheckIfDriverIsSupportedWithHttpInfo (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null);
        /// <summary>
        /// Returns a list of dd file infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>List&lt;DdInfo&gt;</returns>
        List<DdInfo> GetDdInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null);

        /// <summary>
        /// Returns a list of dd file infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>ApiResponse of List&lt;DdInfo&gt;</returns>
        ApiResponse<List<DdInfo>> GetDdInfoWithHttpInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CheckIfDriverIsSupportedAsync (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null);

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CheckIfDriverIsSupportedAsyncWithHttpInfo (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null);
        /// <summary>
        /// Returns a list of dd file infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of List&lt;DdInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DdInfo>> GetDdInfoAsync (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null);

        /// <summary>
        /// Returns a list of dd file infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of ApiResponse (List&lt;DdInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DdInfo>>> GetDdInfoAsyncWithHttpInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DdInfosApi : IDdInfosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DdInfosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DdInfosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DdInfosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DdInfosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>bool?</returns>
        public bool? CheckIfDriverIsSupported (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null)
        {
             ApiResponse<bool?> localVarResponse = CheckIfDriverIsSupportedWithHttpInfo(ddstoreId, modelId, gtin, fwVersion, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CheckIfDriverIsSupportedWithHttpInfo (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null)
        {

            var localVarPath = "/ddstore/api/v1/ddinfos/issupported";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ddstoreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ddstoreId", ddstoreId)); // query parameter
            if (modelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (gtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtin", gtin)); // query parameter
            if (fwVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fwVersion", fwVersion)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIfDriverIsSupported", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CheckIfDriverIsSupportedAsync (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null)
        {
             ApiResponse<bool?> localVarResponse = await CheckIfDriverIsSupportedAsyncWithHttpInfo(ddstoreId, modelId, gtin, fwVersion, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checks if a driver is supported from the DDStore.  One of the main parameters must be used to identify the driver, either the ddstore database id, the gtin or the model id.  In case the driver is identified by gtin, additional the firmware version can be used to select the correct driver. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ddstoreId">Parameter to identify the driver (optional, default to 0)</param>
        /// <param name="modelId">Parameter to identify the driver (optional)</param>
        /// <param name="gtin">Parameter to identify the driver (optional)</param>
        /// <param name="fwVersion">Optional paramter to select the correct driver if gtin is used. (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.              Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CheckIfDriverIsSupportedAsyncWithHttpInfo (int? ddstoreId = null, string modelId = null, string gtin = null, string fwVersion = null, string scope = null)
        {

            var localVarPath = "/ddstore/api/v1/ddinfos/issupported";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ddstoreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ddstoreId", ddstoreId)); // query parameter
            if (modelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (gtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtin", gtin)); // query parameter
            if (fwVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fwVersion", fwVersion)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIfDriverIsSupported", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Returns a list of dd file infos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>List&lt;DdInfo&gt;</returns>
        public List<DdInfo> GetDdInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null)
        {
             ApiResponse<List<DdInfo>> localVarResponse = GetDdInfoWithHttpInfo(offset, limit, search, filter, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of dd file infos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>ApiResponse of List&lt;DdInfo&gt;</returns>
        public ApiResponse< List<DdInfo> > GetDdInfoWithHttpInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null)
        {

            var localVarPath = "/ddstore/api/v1/ddinfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DdInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DdInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DdInfo>)));
        }

        /// <summary>
        /// Returns a list of dd file infos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of List&lt;DdInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DdInfo>> GetDdInfoAsync (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null)
        {
             ApiResponse<List<DdInfo>> localVarResponse = await GetDdInfoAsyncWithHttpInfo(offset, limit, search, filter, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of dd file infos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Optional parameter for pagination. Indicates the index of the first returned element. (optional, default to -1)</param>
        /// <param name="limit">Optional parameter for pagination. Defines how many elements are returned. (optional, default to 20)</param>
        /// <param name="search">Optional parameter for searching. Searches in BasicCode, Naed, ModelId and DeviceTypeName, space separated search substrings return an intersection of the individal search results (AND). (optional)</param>
        /// <param name="filter">Optional parameter for filtering by interface types and ECG types.               The filter string is a comma separated list of any filter value combinations.              Interface filter values are: \&quot;dali\&quot;, \&quot;nfc\&quot;, \&quot;otprog\&quot;              ECG type  filter values are: \&quot;led\&quot;, \&quot;hid\&quot;, \&quot;fluo\&quot;, \&quot;indoor\&quot;, \&quot;outdoor\&quot;              Example filter string: \&quot;nfc,led\&quot; (optional)</param>
        /// <param name="scope">Optional parameter for filtering by application scope.               Application scope filter values are: \&quot;pc\&quot;, \&quot;cloud\&quot;, \&quot;field\&quot;. If not provided \&quot;pc\&quot; is the default value. (optional, default to pc)</param>
        /// <returns>Task of ApiResponse (List&lt;DdInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DdInfo>>> GetDdInfoAsyncWithHttpInfo (int? offset = null, int? limit = null, string search = null, string filter = null, string scope = null)
        {

            var localVarPath = "/ddstore/api/v1/ddinfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DdInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DdInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DdInfo>)));
        }

    }
}
