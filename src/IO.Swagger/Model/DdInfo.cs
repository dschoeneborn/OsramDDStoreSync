/* 
 * DDStore API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Meta information of the dd file.
    /// </summary>
    [DataContract]
    public partial class DdInfo :  IEquatable<DdInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DdInfo" /> class.
        /// </summary>
        /// <param name="id">Unique id of the device description meta info.</param>
        /// <param name="serial">serial.</param>
        /// <param name="gtin">GTIN.</param>
        /// <param name="basicCode">basicCode.</param>
        /// <param name="naed">naed.</param>
        /// <param name="modelId">modelId.</param>
        /// <param name="deviceTypeName">deviceTypeName.</param>
        /// <param name="fwVersion">fwVersion.</param>
        /// <param name="hwVersion">hwVersion.</param>
        /// <param name="deviceDescription">deviceDescription.</param>
        /// <param name="interfaceType">interfaceType.</param>
        /// <param name="ecgType">ecgType.</param>
        /// <param name="docUrl">docUrl.</param>
        /// <param name="picRef">picRef.</param>
        /// <param name="xmlRef">xmlRef.</param>
        /// <param name="scopePC">scopePC.</param>
        /// <param name="scopeCloud">scopeCloud.</param>
        /// <param name="scopeField">scopeField.</param>
        /// <param name="driverType">driverType.</param>
        public DdInfo(int? id = default(int?), string serial = default(string), string gtin = default(string), string basicCode = default(string), string naed = default(string), string modelId = default(string), string deviceTypeName = default(string), string fwVersion = default(string), string hwVersion = default(string), string deviceDescription = default(string), string interfaceType = default(string), string ecgType = default(string), string docUrl = default(string), string picRef = default(string), string xmlRef = default(string), bool? scopePC = default(bool?), bool? scopeCloud = default(bool?), bool? scopeField = default(bool?), string driverType = default(string))
        {
            this.Id = id;
            this.Serial = serial;
            this.Gtin = gtin;
            this.BasicCode = basicCode;
            this.Naed = naed;
            this.ModelId = modelId;
            this.DeviceTypeName = deviceTypeName;
            this.FwVersion = fwVersion;
            this.HwVersion = hwVersion;
            this.DeviceDescription = deviceDescription;
            this.InterfaceType = interfaceType;
            this.EcgType = ecgType;
            this.DocUrl = docUrl;
            this.PicRef = picRef;
            this.XmlRef = xmlRef;
            this.ScopePC = scopePC;
            this.ScopeCloud = scopeCloud;
            this.ScopeField = scopeField;
            this.DriverType = driverType;
        }
        
        /// <summary>
        /// Unique id of the device description meta info
        /// </summary>
        /// <value>Unique id of the device description meta info</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// GTIN
        /// </summary>
        /// <value>GTIN</value>
        [DataMember(Name="gtin", EmitDefaultValue=false)]
        public string Gtin { get; set; }

        /// <summary>
        /// Gets or Sets BasicCode
        /// </summary>
        [DataMember(Name="basicCode", EmitDefaultValue=false)]
        public string BasicCode { get; set; }

        /// <summary>
        /// Gets or Sets Naed
        /// </summary>
        [DataMember(Name="naed", EmitDefaultValue=false)]
        public string Naed { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name="modelId", EmitDefaultValue=false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceTypeName
        /// </summary>
        [DataMember(Name="deviceTypeName", EmitDefaultValue=false)]
        public string DeviceTypeName { get; set; }

        /// <summary>
        /// Gets or Sets FwVersion
        /// </summary>
        [DataMember(Name="fwVersion", EmitDefaultValue=false)]
        public string FwVersion { get; set; }

        /// <summary>
        /// Gets or Sets HwVersion
        /// </summary>
        [DataMember(Name="hwVersion", EmitDefaultValue=false)]
        public string HwVersion { get; set; }

        /// <summary>
        /// Gets or Sets DeviceDescription
        /// </summary>
        [DataMember(Name="deviceDescription", EmitDefaultValue=false)]
        public string DeviceDescription { get; set; }

        /// <summary>
        /// Gets or Sets InterfaceType
        /// </summary>
        [DataMember(Name="interfaceType", EmitDefaultValue=false)]
        public string InterfaceType { get; set; }

        /// <summary>
        /// Gets or Sets EcgType
        /// </summary>
        [DataMember(Name="ecgType", EmitDefaultValue=false)]
        public string EcgType { get; set; }

        /// <summary>
        /// Gets or Sets DocUrl
        /// </summary>
        [DataMember(Name="docUrl", EmitDefaultValue=false)]
        public string DocUrl { get; set; }

        /// <summary>
        /// Gets or Sets PicRef
        /// </summary>
        [DataMember(Name="picRef", EmitDefaultValue=false)]
        public string PicRef { get; set; }

        /// <summary>
        /// Gets or Sets XmlRef
        /// </summary>
        [DataMember(Name="xmlRef", EmitDefaultValue=false)]
        public string XmlRef { get; set; }

        /// <summary>
        /// Gets or Sets ScopePC
        /// </summary>
        [DataMember(Name="scopePC", EmitDefaultValue=false)]
        public bool? ScopePC { get; set; }

        /// <summary>
        /// Gets or Sets ScopeCloud
        /// </summary>
        [DataMember(Name="scopeCloud", EmitDefaultValue=false)]
        public bool? ScopeCloud { get; set; }

        /// <summary>
        /// Gets or Sets ScopeField
        /// </summary>
        [DataMember(Name="scopeField", EmitDefaultValue=false)]
        public bool? ScopeField { get; set; }

        /// <summary>
        /// Gets or Sets DriverType
        /// </summary>
        [DataMember(Name="driverType", EmitDefaultValue=false)]
        public string DriverType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DdInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  BasicCode: ").Append(BasicCode).Append("\n");
            sb.Append("  Naed: ").Append(Naed).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  DeviceTypeName: ").Append(DeviceTypeName).Append("\n");
            sb.Append("  FwVersion: ").Append(FwVersion).Append("\n");
            sb.Append("  HwVersion: ").Append(HwVersion).Append("\n");
            sb.Append("  DeviceDescription: ").Append(DeviceDescription).Append("\n");
            sb.Append("  InterfaceType: ").Append(InterfaceType).Append("\n");
            sb.Append("  EcgType: ").Append(EcgType).Append("\n");
            sb.Append("  DocUrl: ").Append(DocUrl).Append("\n");
            sb.Append("  PicRef: ").Append(PicRef).Append("\n");
            sb.Append("  XmlRef: ").Append(XmlRef).Append("\n");
            sb.Append("  ScopePC: ").Append(ScopePC).Append("\n");
            sb.Append("  ScopeCloud: ").Append(ScopeCloud).Append("\n");
            sb.Append("  ScopeField: ").Append(ScopeField).Append("\n");
            sb.Append("  DriverType: ").Append(DriverType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DdInfo);
        }

        /// <summary>
        /// Returns true if DdInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DdInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DdInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Gtin == input.Gtin ||
                    (this.Gtin != null &&
                    this.Gtin.Equals(input.Gtin))
                ) && 
                (
                    this.BasicCode == input.BasicCode ||
                    (this.BasicCode != null &&
                    this.BasicCode.Equals(input.BasicCode))
                ) && 
                (
                    this.Naed == input.Naed ||
                    (this.Naed != null &&
                    this.Naed.Equals(input.Naed))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.DeviceTypeName == input.DeviceTypeName ||
                    (this.DeviceTypeName != null &&
                    this.DeviceTypeName.Equals(input.DeviceTypeName))
                ) && 
                (
                    this.FwVersion == input.FwVersion ||
                    (this.FwVersion != null &&
                    this.FwVersion.Equals(input.FwVersion))
                ) && 
                (
                    this.HwVersion == input.HwVersion ||
                    (this.HwVersion != null &&
                    this.HwVersion.Equals(input.HwVersion))
                ) && 
                (
                    this.DeviceDescription == input.DeviceDescription ||
                    (this.DeviceDescription != null &&
                    this.DeviceDescription.Equals(input.DeviceDescription))
                ) && 
                (
                    this.InterfaceType == input.InterfaceType ||
                    (this.InterfaceType != null &&
                    this.InterfaceType.Equals(input.InterfaceType))
                ) && 
                (
                    this.EcgType == input.EcgType ||
                    (this.EcgType != null &&
                    this.EcgType.Equals(input.EcgType))
                ) && 
                (
                    this.DocUrl == input.DocUrl ||
                    (this.DocUrl != null &&
                    this.DocUrl.Equals(input.DocUrl))
                ) && 
                (
                    this.PicRef == input.PicRef ||
                    (this.PicRef != null &&
                    this.PicRef.Equals(input.PicRef))
                ) && 
                (
                    this.XmlRef == input.XmlRef ||
                    (this.XmlRef != null &&
                    this.XmlRef.Equals(input.XmlRef))
                ) && 
                (
                    this.ScopePC == input.ScopePC ||
                    (this.ScopePC != null &&
                    this.ScopePC.Equals(input.ScopePC))
                ) && 
                (
                    this.ScopeCloud == input.ScopeCloud ||
                    (this.ScopeCloud != null &&
                    this.ScopeCloud.Equals(input.ScopeCloud))
                ) && 
                (
                    this.ScopeField == input.ScopeField ||
                    (this.ScopeField != null &&
                    this.ScopeField.Equals(input.ScopeField))
                ) && 
                (
                    this.DriverType == input.DriverType ||
                    (this.DriverType != null &&
                    this.DriverType.Equals(input.DriverType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.Gtin != null)
                    hashCode = hashCode * 59 + this.Gtin.GetHashCode();
                if (this.BasicCode != null)
                    hashCode = hashCode * 59 + this.BasicCode.GetHashCode();
                if (this.Naed != null)
                    hashCode = hashCode * 59 + this.Naed.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.DeviceTypeName != null)
                    hashCode = hashCode * 59 + this.DeviceTypeName.GetHashCode();
                if (this.FwVersion != null)
                    hashCode = hashCode * 59 + this.FwVersion.GetHashCode();
                if (this.HwVersion != null)
                    hashCode = hashCode * 59 + this.HwVersion.GetHashCode();
                if (this.DeviceDescription != null)
                    hashCode = hashCode * 59 + this.DeviceDescription.GetHashCode();
                if (this.InterfaceType != null)
                    hashCode = hashCode * 59 + this.InterfaceType.GetHashCode();
                if (this.EcgType != null)
                    hashCode = hashCode * 59 + this.EcgType.GetHashCode();
                if (this.DocUrl != null)
                    hashCode = hashCode * 59 + this.DocUrl.GetHashCode();
                if (this.PicRef != null)
                    hashCode = hashCode * 59 + this.PicRef.GetHashCode();
                if (this.XmlRef != null)
                    hashCode = hashCode * 59 + this.XmlRef.GetHashCode();
                if (this.ScopePC != null)
                    hashCode = hashCode * 59 + this.ScopePC.GetHashCode();
                if (this.ScopeCloud != null)
                    hashCode = hashCode * 59 + this.ScopeCloud.GetHashCode();
                if (this.ScopeField != null)
                    hashCode = hashCode * 59 + this.ScopeField.GetHashCode();
                if (this.DriverType != null)
                    hashCode = hashCode * 59 + this.DriverType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
